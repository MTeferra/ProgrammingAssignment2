a <- available.packages()
head(rownames(a),100)
a
install.packages("caret")
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("cluster", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("codetools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
search()
install.packages("swirl")
install.packages("swirl")
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 1000)
z * 2 + 1000
my_div
bye()
swirl()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
ls
ls()
rm(list=ls())
ls()
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times=10)
rep(c(0, 1, 2), each = 10)
bye()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
rm(list=ls())
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
print(my_char)
my_char
paste(my_char, collapse = " ")
c(my_char, "MikeT")
my_name <- c(my_char, "MikeT")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep ="")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is_na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norm = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
vect.names()
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
bye()
source('~/Documents/R Programming/Exercises/testing.R')
second(c(1,10,100))
second(5)
length(5)
rnorm(1)
5 + rnorm(1)
5 + rnorm(1)
5 + rnorm(1)
5 + rnorm(1)
?rnorm
length(c(1, 10, 100))
c(1, 10, 100) + rnorm(c(1, 10, 100))
source('~/Documents/R Programming/Exercises/testing.R')
airquality
columnmean(airquality)
source('~/Documents/R Programming/Exercises/testing.R')
columnmean(airquality)
columnmean(airquality, FALSE)
columnmean(airquality, removeNA = TRUE)
columnmean(airquality)
?unclass
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
ls()
ls
?ls
search()
install.packages("kernlab")
library("kernlab", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
search()
data(spam)
inTrain <- createDataPartion(y=spam$type, p=0.75, list=FALSE)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
training
set.seed(32343)
modelFit <- train(type ~., data=training, method="glm")
install.packages("e1071")
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
modelFit <- train(type ~., data=training, method="glm")
warnings
warnings()
modelFit
modelFit$finalModel
predictions <- predict(modelFit, data=testing)
predictions <- predict(modelFit, newdata=testing)
predictions
confusionMatrix(predictions, testing$type)
set.seed(32323)
folds <- createFolds(y=spam$type, k=10, list=TRUE, returnTrain=TRUE)
sapply(folds, length)
search()
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
search()
library("kernlab", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
search()
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
modelFit <- train(type=~., daa=training, method="glm")
modelFit <- train(type=~., data=training, method="glm")
search()
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
modelFit <- train(type=~., data=training, method="glm")
args(train.default)
modelFit
modelFit <- train(type ~., data=training, method="glm")
install.packages("ISLR")
library("ISLR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
search()
data(wage)
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training)
dim(testing)
featurPlot(x=training[,c("age","education","jobclass")], y=training$wage, plot=pairs)
featurePlot(x=training[,c("age","education","jobclass")], y=training$wage, plot=pairs)
featurePlot(x=training[,c("age","education","jobclass")], y=training$wage, plot="pairs")
qplot(age, wage, data=training)
qplot(age, wage, color=jobclass, data=training)
qq <- qplot(age, wage, color=education, data=training)
qq + geom_smooth(mathod='lm', formula=y~x)
install.packages("Hmisc")
library("Hmisc", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
cutWage <- cut2(training$wage, g=3)
table(cutWage)
p1 <- qplot(cutWage, age, data=training, fill=cutWage, geom=c("boxplot"))
p1
t1 <- table(cutWage, training$jobclass)
t1
prop.table(t1,1)
qplot(wage, color=eduication, data=training, geom='density')
qplot(wage, color=education, data=training, geom="density")
search()
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("kernlab", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("ISLR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("Hmisc", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
search()
search()
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, LIST=FALSE)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
hist(training$capitalAve, main="", xlab="capital ave run length")
mean(training$capitalAve)
sd(training$capitalAve)
trainCapitalAve <- training$capitalAve
trainCapitalAveS <- (trainCapitalAve - mean(trainCapitalAve))/sd(trainCapitalAve)
mean(trainCapitalAveS)
sd(trainCapitalAveS)
testCapitalAve <- testing$capitalAve
testCapitalAveS <- (testAapitalAve - mean(testCapitalAve))/sd(testCapitalAve)
testCapitalAveS <- (testCapitalAve - mean(testCapitalAve))/sd(testCapitalAve)
mean(testCapitalAveS)
sd(testCapitalAveS)
testCapitalAveS <- (testCapitalAve - mean(trainCapitalAve))/sd(trainCapitalAve)
mean(testCapitalAveS)
sd(testCapitalAveS)
testCapitalAveS <- (testCapitalAve - mean(trainCapitalAve))/sd(trainCapitalAve)
mean(testCapitalAveS)
sd(testCapitalAveS)
mean(trainCapitalAveS)
sd(trainCapitalAveS)
preObj <- preProcess(training[,-58], method=c("center","scale"))
trainCapAveS <- predict(preObj, training[,-58])$capitalAve
mean(trainCapAveS)
sd(trainCapAveS)
testCapAveS <- predict(preObj, testing[,-58])$capitalAve
mean(testCapAveS)
sd(testCapAveS)
set.seed(32343)
modelFit <- train(type ~., data=training, preProcess=c("center", "scale"), method="glm")
modelFit
preObj <- preProcess(training[,-58], method=c("BoxCox"))
trainCapAveS <- predict(preObj, training[,-58])$capitalAve
par(mfrow=c(1,2)); hist(trainCapAveS); qqnorm(trainCapAveS)
set.seed(13343)
training$capAve <- training$capitalAve
selectNA <- rbinorm(dim(training)[1], size=1, prob=0.05) == 1
selectNA <- rbinom(dim(training)[1], size=1, prob=0.05) == 1
training$capAve[selectNA] <- NA
preObj <- preProcess(training[,-58], method="knnImpute")
capAve <- predict(preObj, training[,-58])$capAve
install.packages("RANN")
library("RANN", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
capAve <- predict(preObj, training[,-58])$capAve
capAveTruth <- training$capitalAve
capAveTruth <- (capAveTruth - mean(capAveTruth))/sd(capAveTruth)
quantile(capAve - capAveTruth)
data(Wage)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
table(training$jobClass)
table(training$jobclass)
dummies <- dummyVars(wage ~ jobclass, data=training)
head(predict(dummies, newdata=training))
nsv <- nearZeroVar(training, saveMetrics=TRUE)
nsv
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
news(Version == "1.0.0", package = "ggplot2")
library("kernlab", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
M <- abs(cor(training[,-58]))
diag(M) <- 0
which(M > 0.8, arr.ind=T)
names(spam)[c(34,32)]
names(spam)[c(32,40)]
plot(spam[,32],spam[,34])
plot(spam[,40],spam[,32])
plot(spam[,32],spam[,34])
plot(spam[,40],spam[,32])
which(M > 0.85, arr.ind=T)
which(M > 0.82, arr.ind=T)
which(M > 0.83, arr.ind=T)
smallSpam <- spam[,c(32,43)]
prComp <- prcomp(smallComp)
prComp <- prcomp(smallSpam)
plot(prComp$x[,1], prComp$x[,2])
smallSpam <- spam[,c(32,34)]
prComp <- prcomp(smallSpam)
plot(prComp$x[,1], prComp$x[,2])
prComp$rotation
typeColor <- ((spam$type == "spam")*1 + 1)
prComp <- prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1], prComp$x[,2], col=typeColor, xlab="PC1", ylab="PC2")
preProc <- preProcess(log10(spam[,-58]+1), method="pca", pcaComp=2)
spamPC <- predict(preProc, log10(spam[,-58]+1))
plot(spamPC[,1], spamPC[,2], col=typeColor)
modelFit <- train(training$type ~ ., method="glm", preProcess="pca", data=training)
confusionMatrix(testing$type, predict(modelFit, testing))
search()
data()
data(faithful)
inTrain <- createDataPartion(faithful$waiting, p=0.5, list=FALSE)
inTrain <- createDataPartition(faithful$waiting, p=0.5, list=FALSE)
trainFaith <- faithful[inTrain,]; testFaith <- faithful[-inTrain,]
data(faithful)
set.seed(333)
inTrain <- createDataPartition(faithful$waiting, p=0.5, list=FALSE)
trainFaith <- faithful[inTrain,]; testFaith <- faithful[-inTrain,]
head(trainFaith)
lm1 <- lm(eruptions ~ waiting, data=trainFaith)
summary(lm1)
plot(trainFaith$waiting, trainFaith$erruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
lines(trainFaith$waiting, lm1$fitted, lwd=3)
lines(trainFaith$waiting, lm1$fitted, lwd=3)
plot(trainFaith$waiting, trainFaith$erruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
plot(trainFaith$waiting, trainFaith$erruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
lines(trainFaith$waiting, lm1$fitted, lwd=3)
?lines
newdata <- data.frame(waiting=80)
predict(lm1, newdata)
par(mfrow=c(1,2))
plot(trainFaith$waiting, trainFaith$erruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
lines(trainFaith$waiting, lm1$fitted, lwd=3)
lines(trainFaith$waiting, predict(lm1), lwd=3)
plot(trainFaith$waiting, trainFaith$erruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
lines(trainFaith$waiting, predict(lm1,newdata=testFaith), lwd=3)
par(mfrow=c(1,2))
plot(trainFaith$waiting, trainFaith$erruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
lines(trainFaith$waiting, predict(lm1), lwd=3)
plot(testFaith$waiting, testFaith$erruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
lines(testFaith$waiting, predict(lm1,newdata=testFaith), lwd=3)
head(testFaith)
plot(testFaith$waiting, testFaith$erruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
head(trainFaith)
plot(trainFaith$waiting, trainFaith$erruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
data(faithful)
set.seed(333)
inTrain <- createDataPartition(y=faithful$waiting, p=0.5, list=FALSE)
trainFaith <- faithful[inTrain,]; testFaith <- faithful[-inTrain,]
head(trainFaith)
head(testFaith)
lm1 <- lm(eruptions ~ waiting, data=trainFaith)
summary(lm1)
plot(trainFaith$waiting, trainFaith$erruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
lines(trainFaith$waiting, lm1$fitted, lwd=3)
par(wform=c(1,2))
lines(trainFaith$waiting, lm1$fitted, lwd=3, col="red")
lines(trainFaith$waiting, lm1$fitted, lwd=3, col="black")
plot(trainFaith$waiting, trainFaith$erruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
lines(trainFaith$waiting,lm1$fitted,lwd=3)
plot(trainFaith$waiting, trainFaith$erruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
lines(trainFaith$waiting,lm1$fitted,lwd=3)
par(mfrow=c(1,2))
plot(trainFaith$waiting, trainFaith$erruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
lines(trainFaith$waiting,lm1$fitted,lwd=3)
plot(testFaith$waiting, testFaith$erruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
lines(testFaith$waiting, predict(lm1, newdata=testFaith), lwd=3)
plot(testFaith$waiting, testFaith$erruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
par(mfrow=c(1,2))
plot(trainFaith$waiting, trainFaith$erruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
par(new=T)
lines(trainFaith$waiting,predict(lm1),lwd=3)
par(new=F)
lines(trainFaith$waiting,predict(lm1),lwd=3)
plot(testFaith$waiting, testFaith$erruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
lines(testFaith$waiting, predict(lm1, newdata=testFaith), lwd=3)
predict(lm1)
plm1 <- predict(lm1)
min(plm1)
max(plm1)
min(trainFaith@eruptions)
trainFaith$reuptions
trainFaith$waiting
min(trainFaith$eruptions)
par(mfrow=c(1,2))
plot(trainFaith$waiting, trainFaith$erruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration", ylim=c(min(trainFaith$eruptions,plm1),max(trainFaith$eruptions,plm1)))
plm1
min(trainFaith$eruptions,predict(lm1))
max(trainFaith$eruptions,predict(lm1))
y1 <- max(trainFaith$eruptions,predict(lm1))
y1 <- mmin(trainFaith$eruptions,predict(lm1))
y1 <- min(trainFaith$eruptions,predict(lm1))
y2 <- max(trainFaith$eruptions,predict(lm1))
par(mform=c(1,2))
par(mfrow=c(1,2))
plot(trainFaith$waiting, trainFaith$erruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration", ylim=c(y1,y2))
lines(trainFaith$waiting, predict(lm1))
plot(testFaith$waiting, testFaith$erruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
lines(testFaith$waiting, predict(lm1, newdata=testFaith), lwd=3)
sqrt(sum((lm1$fitted - training$eruptions)^2))
sqrt(sum((lm1$fitted - trainFaith$eruptions)^2))
sqrt(sum((predict(lm1, newdata=testFaith) - testFaith$eruptions)^2))
plot(testFaith$waiting, testFaith$erruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
lines(testFaith$waiting, y=predict(lm1, newdata=testFaith), lwd=3)
lines(testFaith$waiting, predict(lm1, newdata=testFaith), lwd=3)
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("kernlab", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
lapply(x, function(elt) elt[,1])
x
x <- list( a = 1:4, b = rnorm(10), c = rnorm(20,1), d = rnorm(100,1))
lapply(x, mean)
x <- list( a = 1:4, b = rnorm(10), c = rnorm(20,1), d = rnorm(100,5))
lapply(x, mean)
sapply(x, mean)
x <- matrix(rnorm(200), 20, 10)
x
apply(x, 2, mean)
str(train)
str(apply)
apply(x, 2, sum)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
f <- gl(3, 10)
f
tapply(x, f, mean)
tapply(x, f, range)
setwd("~/Documents/R Programming/Exercises")
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("kernlab", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
setwd("~/Documents/R Programming/Exercises/ProgrammingAssignment2")
str(numeric)
?numeric
x <- numeric()
class(x)
x
str(matrix)
x <- matrix()
x
dim(x)
x[1,1]
help("<<-")
source('~/Documents/R Programming/Exercises/ProgrammingAssignment2/cachematrix.R')
?matrix
m1 < matrix(data = 1:4, nrow = 2, ncol = 2)
m1 <- matrix(data = 1:4, nrow = 2, ncol = 2)
m1
makeCacheMatrix(m1)
cacheSolve(m1)
m1$getinv
solve(m1)
m1
source('~/Documents/R Programming/Exercises/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m1)
m1$get()
makeCacheMatrix(m1)
a1 <- makeCacheMatrix(m1)
cacheSolve(a1)
cacheSolve(a1)
